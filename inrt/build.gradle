import java.nio.charset.Charset

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

File propFile =new File("E:/资料/jks/autojs-inrt/sign.properties")
Properties properties = new Properties()
if(propFile.exists()){
    properties.load(new InputStreamReader(new FileInputStream(propFile), Charset.forName("utf-8")))
}
android {
    compileSdkVersion versions.compile
    buildToolsVersion versions.buildTool

    defaultConfig {
        applicationId "com.stardust.auojs.inrt"
        minSdkVersion versions.mini
        targetSdkVersion versions.target
        versionCode versions.appVersionCode
        versionName versions.appVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
//        buildConfigField "boolean","isMarket","true" // 这是有注册码的版本
        buildConfigField "boolean","isMarket","false"
    }
    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    splits {

        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "armeabi-v7a"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false
        }
    }
    signingConfigs {
        if(propFile.exists()) {
            release {
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
                storeFile file(properties['storeFile'])
                storePassword properties['storePassword']
            }
        }
    }
    flavorDimensions "channel"
    productFlavors {
        common {
            buildConfigField "boolean","isMarket","false"
            manifestPlaceholders = [appName: "inrt"]
        }
        market {
            buildConfigField "boolean","isMarket","true"
            manifestPlaceholders = [appName: "AIX云控"]
        }

    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if(propFile.exists()) {
                signingConfig signingConfigs.release
            }
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if(propFile.exists()) {
                signingConfig signingConfigs.release
            }
        }
    }

}
task publishMarket(group: 'build') {
    println "publish app"
    println "$rootDir"
    doLast {
        exec {
            //切换到sh文件所在的目录，执行脚本
            workingDir "E:/资料/jks/shell"
            //修改命令输出的地方，默认为控制台
            standardOutput = out
            //执行shell脚本
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                executable 'cmd'
                args '/c', "node scnode.js $projectDir\\build\\outputs\\apk\\market\\release $rootDir 22"
            } else {
                commandLine 'sh', '-c', "node scnode.js $projectDir\\build\\outputs\\apk\\market\\release $rootDir 22"
            }
        }
    }
}


def buildApkPluginForAbi(File pluginProjectDir, String abi) {

    copy {
        def debugPath = 'build\\outputs\\apk\\common\\debug\\'
        def releasePath = 'build\\outputs\\apk\\common\\release\\'
        def debugFile = file(debugPath)
        def fileName
        if (debugFile.exists()) {
            from debugFile
            into new File(pluginProjectDir, 'src\\main\\assets')
            fileName = "inrt-common-" + abi + "-debug.apk"
        } else {
            from file(releasePath)
            into new File(pluginProjectDir, 'src\\main\\assets')
            fileName = "inrt-common-" + abi + "-release-unsigned.apk"
        }

        include fileName
        rename fileName, 'template.apk'
    }
    println 'app cp 完成'
}

task cp2APP(group: 'build') {
    doLast {
        def pluginProjectDirPath = '..\\app'
        println pluginProjectDirPath
        def pluginProjectDir = file(pluginProjectDirPath)
        if (!pluginProjectDir.exists() || !pluginProjectDir.isDirectory()) {
            println 'app 目录 not exists'
            return
        }
        println pluginProjectDir
        buildApkPluginForAbi(pluginProjectDir, 'armeabi-v7a')
//        buildApkPluginForAbi(pluginProjectDir, 'arm64-v8a')
     //   buildApkPluginForAbi(pluginProjectDir, 'x86')
    }
}




tasks.whenTaskAdded { task ->
    println("=================task "+task.name+" added=================")

}

repositories {
    flatDir {
        dirs 'libs'
    }
    google()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.6.0-alpha01'
    implementation 'androidx.annotation:annotation:1.3.0'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.1-alpha01', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    //Glide
    implementation('com.github.bumptech.glide:glide:4.2.0', {
        exclude group: 'com.android.support'
    })
    implementation 'com.google.android.material:material:1.6.0-alpha01'
    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:2.2.3"
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'com.fanjun:keeplive:1.1.22'
    implementation  'com.dhh:websocket2:2.1.4'
    implementation 'com.github.SenhLinsh:Utils-Everywhere:3.0.0'
    testImplementation 'junit:junit:4.13.1'
    implementation project(':automator')
    implementation project(':common')
    implementation project(':autojs')
}
